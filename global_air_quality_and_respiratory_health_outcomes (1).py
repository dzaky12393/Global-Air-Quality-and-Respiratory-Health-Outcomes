# -*- coding: utf-8 -*-
"""Global Air Quality and Respiratory Health Outcomes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1baz8DOxKCnvFxn_ZG4hsnb6zi6l4GU4A
"""

# Instalasi library (jalankan jika belum terinstal di lingkungan Anda)
# !pip install kaggle plotly

# Import semua library yang dibutuhkan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
import zipfile
import os

!pip install kaggle

from google.colab import files

files.upload()

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

kaggle_dataset_slug = 'tfisthis/global-air-quality-and-respiratory-health-outcomes'
!kaggle datasets download {kaggle_dataset_slug}

import zipfile
import os

zip_file_name = f'{kaggle_dataset_slug.split("/")[-1]}.zip'

if os.path.exists(zip_file_name):
    with zipfile.ZipFile(zip_file_name, 'r') as zip_ref:
        zip_ref.extractall('.')
    os.remove(zip_file_name)
else:
    print(f"Error: File '{zip_file_name}' tidak ditemukan.")

import pandas as pd

csv_files = [f for f in os.listdir('.') if f.endswith('.csv')]

if len(csv_files) == 1:
    csv_file_name = csv_files[0]
    df = pd.read_csv(csv_file_name)
    print("\n5 Baris Pertama Dataset:")
    print(df.head())
    print("\nInformasi Dataset:")
    df.info()
elif len(csv_files) > 1:
    print("\nBeberapa file CSV ditemukan setelah ekstraksi:")
    for f in csv_files:
        print(f"- " + f)
    csv_file_name = csv_files[0]
    df = pd.read_csv(csv_file_name)
    print(f"\nDataset '{csv_file_name}' berhasil dimuat ke Pandas DataFrame!")
    print("\n5 Baris Pertama Dataset:")
    print(df.head())
    print("\nInformasi Dataset:")
    df.info()
else:
    print("\nError: Tidak ada file CSV yang ditemukan setelah ekstraksi.")

# Konversi kolom 'date' menjadi tipe datetime dan set sebagai indeks
df['date'] = pd.to_datetime(df['date'])
df.set_index('date', inplace=True)

# Filter data hanya untuk tahun 2020 hingga 2025 (berdasarkan diskusi sebelumnya)
df_filtered = df[df.index.year <= 2025].copy()

# Penanganan Missing Values
for col in df_filtered.columns:
    if df_filtered[col].isnull().any():
        if df_filtered[col].dtype in ['int64', 'float64']:
            median_val = df_filtered[col].median()
            df_filtered[col].fillna(median_val, inplace=True)
        elif df_filtered[col].dtype == 'object':
            mode_val = df_filtered[col].mode()[0]
            df_filtered[col].fillna(mode_val, inplace=True)

# Penanganan Duplikat
if df_filtered.duplicated().sum() > 0:
    df_filtered.drop_duplicates(inplace=True)

print("\nDataset Setelah Pembersihan dan Filter Tanggal:")
print(df_filtered.head())
print("\nRentang Tanggal Setelah Filter:")
print(f"Tanggal Minimum (Filter): {df_filtered.index.min()}")
print(f"Tanggal Maksimum (Filter): {df_filtered.index.max()}")
print("\nInformasi Dataset Setelah Pembersihan:")
df_filtered.info()

print("\nDistribusi Variabel Numerik Kunci:")
plt.figure(figsize=(15, 10))

plt.subplot(2, 2, 1)
sns.histplot(df_filtered['pm2_5'], kde=True)
plt.title('Distribusi PM2.5')
plt.xlabel('PM2.5')
plt.ylabel('Frekuensi')

plt.subplot(2, 2, 2)
sns.histplot(df_filtered['no2'], kde=True)
plt.title('Distribusi NO2')
plt.xlabel('NO2')
plt.ylabel('Frekuensi')

plt.subplot(2, 2, 3)
sns.histplot(df_filtered['pm10'], kde=True)
plt.title('Distribusi PM10')
plt.xlabel('PM10')
plt.ylabel('Frekuensi')

plt.subplot(2, 2, 4)
sns.histplot(df_filtered['hospital_admissions'], kde=True)
plt.title('Distribusi Hospital Admissions')
plt.xlabel('Hospital Admissions')
plt.ylabel('Frekuensi')

plt.tight_layout()
plt.show()

print("\nHeatmap Korelasi Antar Variabel Numerik:")
correlation_matrix = df_filtered.corr(numeric_only=True)
plt.figure(figsize=(14, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Heatmap Korelasi Antar Variabel')
plt.show()

print("\nVisualisasi Hubungan Bivariat Kunci:")
plt.figure(figsize=(10, 7))
sns.scatterplot(x='pm2_5', y='hospital_admissions', data=df_filtered, alpha=0.6)
plt.title('Hubungan PM2.5 dan Hospital Admissions')
plt.xlabel('Konsentrasi PM2.5')
plt.ylabel('Jumlah Penerimaan Rumah Sakit')
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

plt.figure(figsize=(12, 8))
sns.boxplot(x='city', y='hospital_admissions', data=df_filtered)
plt.title('Distribusi Hospital Admissions per Kota')
plt.xlabel('Kota')
plt.ylabel('Jumlah Penerimaan Rumah Sakit')
plt.xticks(rotation=45, ha='right')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Pilih kolom numerik untuk resampling bulanan
numeric_cols_for_resampling = [
    'aqi', 'pm2_5', 'pm10', 'no2', 'o3',
    'temperature', 'humidity', 'hospital_admissions', 'hospital_capacity'
]
df_monthly = df_filtered[numeric_cols_for_resampling].resample('ME').mean()

print("\nData Tren Bulanan Global (5 Baris Pertama):")
print(df_monthly.head())

fig_global_trend, ax1_global_trend = plt.subplots(figsize=(15, 7))

ax1_global_trend.plot(df_monthly.index, df_monthly['pm2_5'], color='tab:blue', marker='o', linestyle='-')
ax1_global_trend.set_xlabel('Tanggal')
ax1_global_trend.set_ylabel('Rata-rata PM2.5', color='tab:blue')
ax1_global_trend.tick_params(axis='y', labelcolor='tab:blue')
ax1_global_trend.grid(True, linestyle='--', alpha=0.7)

ax2_global_trend = ax1_global_trend.twinx()
ax2_global_trend.plot(df_monthly.index, df_monthly['hospital_admissions'], color='tab:orange', marker='o', linestyle='-')
ax2_global_trend.set_ylabel('Rata-rata Hospital Admissions', color='tab:orange')
ax2_global_trend.tick_params(axis='y', labelcolor='tab:orange')

plt.title('Tren Rata-rata PM2.5 dan Hospital Admissions Bulanan (2020-2025)')
plt.xlim(pd.Timestamp('2020-01-01'), pd.Timestamp('2025-12-31'))
fig_global_trend.tight_layout()
plt.show()

# Siapkan data bulanan untuk setiap kota
df_monthly_per_city = {}
unique_cities = df_filtered['city'].unique()

for city in unique_cities:
    df_city = df_filtered[df_filtered['city'] == city].copy()
    df_monthly_per_city[city] = df_city[['pm2_5', 'hospital_admissions']].resample('ME').mean()

fig_interactive = go.Figure()

current_trace_idx = 0
trace_index_map = {}

for city in unique_cities:
    fig_interactive.add_trace(go.Scatter(
        x=df_monthly_per_city[city].index,
        y=df_monthly_per_city[city]['pm2_5'],
        mode='lines+markers',
        name=f'{city} - PM2.5',
        line=dict(color=px.colors.qualitative.Plotly[current_trace_idx % len(px.colors.qualitative.Plotly)]),
        visible=False
    ))
    trace_index_map[f'{city}_pm2_5'] = current_trace_idx
    current_trace_idx += 1

    fig_interactive.add_trace(go.Scatter(
        x=df_monthly_per_city[city].index,
        y=df_monthly_per_city[city]['hospital_admissions'],
        mode='lines+markers',
        name=f'{city} - Hospital Admissions',
        line=dict(color=px.colors.qualitative.Plotly[current_trace_idx % len(px.colors.qualitative.Plotly)], dash='dot'),
        visible=False,
        yaxis='y2'
    ))
    trace_index_map[f'{city}_hospital_admissions'] = current_trace_idx
    current_trace_idx += 1

buttons = []

all_visible_state = [True] * (len(unique_cities) * 2)
buttons.append(dict(
    label='Tampilkan Semua Kota',
    method='update',
    args=[
        {'visible': all_visible_state},
        {'title': 'Tren Bulanan PM2.5 dan Hospital Admissions (Semua Kota)'}
    ]
))

for i, city in enumerate(unique_cities):
    visible_state_for_city = [False] * (len(unique_cities) * 2)
    visible_state_for_city[trace_index_map[f'{city}_pm2_5']] = True
    visible_state_for_city[trace_index_map[f'{city}_hospital_admissions']] = True

    buttons.append(dict(
        label=city,
        method='update',
        args=[
            {'visible': visible_state_for_city},
            {'title': f'Tren Bulanan PM2.5 dan Hospital Admissions di {city}'}
        ]
    ))

fig_interactive.update_layout(
    title_text='Tren Bulanan Kualitas Udara dan Kesehatan per Kota',
    xaxis_title='Tanggal',
    yaxis=dict(
        title='Rata-rata PM2.5',
        side='left',
        showgrid=True,
        zeroline=True
    ),
    yaxis2=dict(
        title='Rata-rata Hospital Admissions',
        side='right',
        overlaying='y',
        showgrid=False,
        zeroline=False
    ),
    updatemenus=[
        dict(
            type="buttons",
            direction="right",
            x=0.0,
            xanchor="left",
            y=1.3,
            yanchor="top",
            buttons=buttons
        ),
    ],
    hovermode='x unified',
    height=600,
    margin=dict(t=220)
)

fig_interactive.show()

